name: Publish releases

on:
  push:
    tags:
      - 'v*' # Push events to matching v*, i.e. v1.0, v20.15.10

jobs:
  publish_macos:
    runs-on: macos-latest
    steps:
      - uses: actions/checkout@v3
      - name: Bundle dependencies
        run: bundle install
      - name: Set env
        run: echo "RELEASE_VERSION=$(echo ${GITHUB_REF:11})" >> $GITHUB_ENV
      - name: Set workspace env
        run: echo "GITHUB_WORKSPACE=$(echo ${GITHUB_WORKSPACE})" >> $GITHUB_ENV
      - name: .NET project version updater
        uses: vers-one/dotnet-project-version-updater@v1.2
        with:
          file: 'badger.csproj'
          version: ${{ env.RELEASE_VERSION }}

      - name: Setup .NET
        uses: actions/setup-dotnet@v3
        with:
          dotnet-version: 7.0.x

      - name: Publish osx-x64
        run: dotnet publish -c Release -r osx-x64 --self-contained true
      - name: Publish osx-arm64
        run: dotnet publish -c Release -r osx-arm64 --self-contained true
      - name: Publish win-x64
        run: dotnet publish -c Release -r win-x64 --self-contained true
      - name: Publish linux-x64
        run: dotnet publish -c Release -r linux-x64 --self-contained true
      - name: chmod
        run: |
          chmod +x ${GITHUB_WORKSPACE}/bin/Release/net7.0/osx-x64/publish/badger
          chmod +x ${GITHUB_WORKSPACE}/bin/Release/net7.0/osx-arm64/publish/badger
      - name: Add Cert to Keychain
        uses: apple-actions/import-codesign-certs@v1
        with:
          p12-file-base64: ${{ secrets.MAC_CERT_BASE64 }}
          p12-password: ${{ secrets.MAC_CERT_PASSWORD }}
      - name: Sign binaries
        run: |
          codesign --timestamp --options=runtime --no-strict --force --sign "Developer ID Application: Alexandru Geana (7G4UQW35EL)" ${GITHUB_WORKSPACE}/bin/Release/net7.0/osx-x64/publish/badger --entitlements ${GITHUB_WORKSPACE}/entitlements.plist
          codesign --timestamp --options=runtime --no-strict --force --sign "Developer ID Application: Alexandru Geana (7G4UQW35EL)" ${GITHUB_WORKSPACE}/bin/Release/net7.0/osx-arm64/publish/badger --entitlements ${GITHUB_WORKSPACE}/entitlements.plist
      - name: Zip binaries
        run: |
          zip --junk-paths badger-osx-x64.zip ${GITHUB_WORKSPACE}/bin/Release/net7.0/osx-x64/publish/badger
          zip --junk-paths badger-osx-arm64.zip ${GITHUB_WORKSPACE}/bin/Release/net7.0/osx-arm64/publish/badger
          zip --junk-paths badger-osx-arm64.zip ${GITHUB_WORKSPACE}/bin/Release/net7.0/win-x64/publish/badger
          zip --junk-paths badger-osx-arm64.zip ${GITHUB_WORKSPACE}/bin/Release/net7.0/linux-x64/publish/badger
      - name: Create JSON
        uses: jsdaniell/create-json@v1.2.2
        with:
          name: creds.json
          json: ${{ secrets.APP_STORE_CONNECT_API_KEY }}
      - name: Fastlane notarize
        run: |
          bundle exec fastlane run notarize skip_stapling:true package:badger-osx-x64.zip bundle_id:com.hexul.badger api_key_path:creds.json print_log:true verbose
          bundle exec fastlane run notarize skip_stapling:true package:badger-osx-arm64.zip bundle_id:com.hexul.badger api_key_path:creds.json print_log:true verbose
      - name: Create release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ github.ref }}
          draft: false
          prerelease: false
      - name: Upload osx-x64 assets
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: ./badger-osx-x64.zip
          asset_name: badger-osx-x64.zip
          asset_content_type: application/zip

      - name: Upload osx-arm64 assets
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: ./badger-osx-arm64.zip
          asset_name: badger-osx-arm64.zip
          asset_content_type: application/zip

      - name: Upload win-x64 assets
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: ./badger-win-x64.zip
          asset_name: badger-win-x64.zip
          asset_content_type: application/zip

      - name: Upload linux-x64 assets
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: ./badger-linux-x64.zip
          asset_name: badger-linux-x64.zip
          asset_content_type: application/zip
      - name: Install dependencies
        run: dotnet restore
      - name: Build
        run: dotnet build -c Release --no-restore
      - name: Package
        run: dotnet pack -c Release -o . ${{env.GITHUB_WORKSPACE}}/badger.csproj
      - name: Publish to NuGet
        run: dotnet nuget push *.nupkg -k ${{ secrets.NUGET_API_KEY }} -s https://api.nuget.org/v3/index.json
      - name: publish package to GitHub
        run: dotnet nuget push *.nupkg --api-key ${{secrets.GITHUB_TOKEN}} --source "https://nuget.pkg.github.com/hex/index.json" --skip-duplicate
        